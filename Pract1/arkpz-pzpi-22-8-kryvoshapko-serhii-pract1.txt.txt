МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмної інженерії»


ЗВІТ
з практичного заняття № 1
з дисципліни «Аналіз та рефакторинг коду»



Виконав:
ст. гр. ПЗПІ-22-8
Кривошапко Сергій
	Перевірив:
ст. викладач каф. ПІ 
Сокорчук І.П





Харків 2024
1.1 Тема
     Рекомендації написання коду для мови програмування Dart.
     1.2 Мета роботи
     Дослідити рекомендації щодо написання коду обраної мови програмування, підготувати презентацію з опрацьованого матеріалу.
	1.3 Хід роботи
     Основні рекомендації написання коду для Dart:
1) Стильові рекомендації: використовуйте стандартний стиль оформлення коду за допомогою інструменту dartfmt. Добре структуровані імена покращують зрозумілість коду.
  Приклад:
// Поганий приклад
int myfunction(){ return 0;}

// Гарний приклад
int myFunction() {
  return 0;
}

2) Іменування змінних функцій і класів: використовуйте CamelCase для класів і методів, а нижнє підкреслення для приватних змінних. Добре структуровані імена покращують зрозумілість коду.
Приклад:
// Поганий приклад
class userprofile {
  String _Username; // приватна змінна
  void displayinfo() { // метод
    print(_Username);
  }
}
// Гарний приклад
class UserProfile {
  String _username; // приватна змінна
  void displayInfo() { // метод
    print(_username);
  }
}

3) Структура коду: організуйте код у модулі та пакети. Це допомагає підтримувати чистоту та логічність у великих проєктах.
Приклад:
Class UserProfile {
    Void displayInfo( ) { }
}
Import ‘user.dart’;
void main( ) {
    Var user = UserProfile( );
     user.displayInfo( );
}
import 'user.dart' ; показує, що код розбитий на окремі файли. Файл user.dart містить логіку, пов’язану з користувачем (клас UserProfile), а основна програма — в окремому файлі main.dart.

4) Рекомендація з використання принципів рефакторингу: регулярно рефакторте код для підвищення його якості. Рефакторинг робить код більш гнучким і простим у підтримці.
Приклад:
// До рефакторингу
void printNumbers() {
  for (int i = 0; i < 10; i++) {
    print(i);
  }
}

// Після рефакторингу
void printNumbers(int max) {
  for (int i = 0; i < max; i++) {
    print(i);
  }
}

5) Оптимізація продуктивності: використовуйте асинхронні операції для підвищення продуктивності. Асинхронні функції дозволяють виконувати довгі операції без блокування основного потоку. Dart підтримує оптимізацію продуктивності через асинхронне програмування (async/await).
Приклад:
Future<void> fetchData() async {
  var data = await fetchFromServer();
  print(data);
}

6) Обробка помилок: використовуйте конструкцію try-catch для обробки винятків. Правильна обробка помилок підвищує стабільність програми.

Приклад:
// Функція без обробки помилок
Future<void> fetchData() async {
  var result = await fetchFromServer(); // Якщо виникне помилка, програма аварійно завершиться
  print('Отримані дані: $result');
}
// Функція з обробкою помилок за допомогою try-catch
Future<void> fetchData() async {
  try {
    var result = await fetchFromServer();
    print('Отримані дані: $result');
  } catch (e) {
    print('Помилка при отриманні даних: $e');
  }
}

7) Дотримання парадигм програмування: Дотримуйтесь принципів об'єктно-орієнтованого програмування (ООП). ООП дозволяє будувати код, який легко розширюється і підтримується.

Приклад:
// Клас "Тварина"
class Animal {
  String name;
  int age;

  // Конструктор
  Animal(this.name, this.age);

  // Метод, який описує тварину
  void describe() {
    print('$name є тваринам віком $age років.');
  }
}
// Клас "Собака", що наслідує клас "Тварина"
class Dog extends Animal {
  String breed;
  // Конструктор для класу "Собака"
  Dog(String name, int age, this.breed) : super(name, age);
  // Перевизначення методу
  @override
  void describe() {
    print('$name — це $breed, віком $age років.');
  }
  // Додатковий метод для класу "Собака"
  void bark() {
    print('$name гавкає!');
  }
}
void main() {
  // Створюємо об'єкт класу "Тварина"
  var animal = Animal('Лев', 4);
  animal.describe(); // Виведе: Лев є тваринам віком 4 років.
  // Створюємо об'єкт класу "Собака"
  var dog = Dog('Рекс', 3, 'Вівчарка');
  dog.describe(); // Виведе: Рекс — це Вівчарка, віком 3 років.
  dog.bark();     // Виведе: Рекс гавкає!
}


1.	Клас Animal містить основні властивості тварини: ім'я та вік.
2.	Клас Dog наслідує клас Animal, додає власну властивість (порода) та перевизначає метод describe().
3.	Метод bark() додає нову функціональність для класу Dog.
Цей код демонструє основні принципи ООП: наслідування, інкапсуляцію та поліморфізм.

8) Тестування та документування коду: Регулярно тестуйте код та додавайте коментарі. Тести дозволяють виявити помилки на ранніх стадіях, а коментарі полегшують читання коду.
Приклад тестування коду:
import 'package:test/test.dart';
// Функція, яку будемо тестувати
int add(int a, int b) {
  return a + b;
}

void main() {
  // Група тестів
  group('Тести для функції add', () {
    test('Додає два позитивні числа', () {
      expect(add(2, 3), equals(5));  // Перевірка результату
    });
    test('Додає негативне і позитивне число', () {
      expect(add(-2, 3), equals(1));  // Перевірка результату
    });
    test('Додає два негативні числа', () {
      expect(add(-2, -3), equals(-5));  // Перевірка результату
    });
  });
}

Основні переваги дотримання рекомендацій: 
1.	Зрозумілість: Інший розробник може швидко зрозуміти та змінювати код. 
2.	Зручність у підтримці: Легше вносити зміни та виправляти помилки без ризику пошкодити інші частини програми. 
3.	Підвищення продуктивності: Код працює ефективніше, використовуючи ресурси системи раціонально, з асинхронністю та обробкою помилок.

Список використаних джерел:
1. Official documentation Dart: https://dart.dev/ 
2. Effective Dart: Style: https://dart.dev/guides/language/effective-dart/style 
3. Dart: Up and Running: https://www.oreilly.com/library/view/dart-up-and/9781449330897/ 
4. Asynchronous Programming: Futures, Streams, and async/await: https://dart.dev/codelabs/async-await





 
ДОДАТОК А
 
Рисунок А.1 – Титульний слайд презентації

 
Рисунок А.2 – Введення в мову програмування Dart
 
Рисунок А.3 – Стильові рекомендації для мови програмування Dart

 
Рисунок А.4 – Рекомендація щодо іменування змінних, функцій і класів
 
Рисунок А.5 – Рекомендація щодо структури коду

 
Рисунок А.6 – Рекомендація щодо принципів рефакторингу
 
Рисунок А.7 – Рекомендація щодо оптимізації продуктивності

 
Рисунок А.8 – Рекомендація щодо обробки помилок
 
Рисунок А.9 – Рекомендація щодо дотримання парадигм програмування 

 
Рисунок А.10 – Рекомендація щодо тестування та документування коду
 
Рисунок А.11 – Основні переваги дотримання рекомендацій
 
Рисунок А.12 – Список використаних джерел 

