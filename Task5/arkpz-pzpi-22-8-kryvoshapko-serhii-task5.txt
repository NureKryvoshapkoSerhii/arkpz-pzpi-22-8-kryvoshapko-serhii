МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмної інженерії»



ЗВІТ
З лабораторної роботи № 5
з дисципліни
«Аналіз та рефакторинг коду»



Виконав
ст. гр. ПЗПІ-22-8
Кривошапко Сергій	Перевірив
ст. викладач каф. ПІ
Сокорчук І. П.













Харків 2024
1 Мета роботи:

Розгорнути реалізовану програмну систему, перевірити та налаштувати роботу розгорнутої програмної системи.

2 Хід роботи:

2.1 Опис розгорнутої програмної системи

Розроблена програмна система призначена для керування різними аспектами проекту, включаючи обробку даних користувачів, відстеження активностей, та взаємодію з базою даних. Система складається з серверної частини, написаної на платформі ASP.NET Core, і бази даних, керованої Microsoft SQL Server. Вона працює як локально розгорнута програма, що забезпечує доступ до API на моєму комп'ютері. Окрім цього, система інтегрована з додатковою підсистемою для вимірювання ваги користувачів, яка працює та надсилає дані на сервер.

2.2	 Опис розгортання

Серверна частина:

-	Мова програмування: Серверна частина програми написана на мові програмування C#;

-	Фреймворк: Використовується фреймворк ASP.NET Core, який надає потужні можливості для розробки веб-додатків та API. ASP.NET Core забезпечує високу продуктивність, масштабованість та підтримку крос-платформної роботи;

-	Контролери та маршрутизація: Всі необхідні контролери налаштовані для обробки HTTP-запитів. Для кожної функціональності створено окремий контролер з відповідними методами для обробки запитів GET, POST, PUT та DELETE. Маршрутизація налаштована таким чином, щоб забезпечити зручний доступ до різних кінцевих точок API;

-	Сервіси та залежності: Використовується вбудований механізм впровадження залежностей (Dependency Injection) для управління життєвим циклом сервісів та забезпечення їхньої взаємодії. Сервіси для роботи з базою даних, обробки логіки бізнесу та інших функцій налаштовані як залежності та впроваджуються у контролери.

Локальна база даних:

-	СУБД: Для зберігання даних використовується локально встановлений Microsoft SQL Server. Це надійна та масштабована система управління базами даних, яка забезпечує високу продуктивність та безпеку даних;

-	Структура бази даних: База даних містить усі необхідні таблиці для зберігання даних користувачів, активностей, цілей, харчових продуктів та інших сутностей. Таблиці мають відповідні зв'язки для забезпечення цілісності даних та швидкості виконання запитів;
-	Міграції та оновлення: Використовується система міграцій для керування схемою бази даних. Це дозволяє автоматизувати процес створення та оновлення структури бази даних, забезпечуючи синхронізацію з модельним кодом програми.

API:

-	Створення кінцевих точок: API налаштоване для роботи на локальному хості та доступне в локальній мережі. Кожна кінцева точка відповідає за певну функціональність, наприклад, обробку даних користувачів, відстеження активностей, збереження та отримання інформації про харчові продукти;

-	Специфікація API: Для спрощення роботи з API використовується інструмент Swagger, була створення специфікація для розробленого API, яка надає детальний опис розгортання API, та опис всіх кінцевих точок і те як з ними працювати.

Інтеграція з підсистемою вимірювання ваги:

-	Підключення вагових пристроїв: Система інтегрована з ІоТ системою вимірювання ваги користувачів, що дозволяє автоматично збирати дані про вагу та зберігати їх у базі даних. Ці дані використовуються для подальшого аналізу та корегування прогресу користувачів;

-	Надсилання даних: Дані з вагових пристроїв надсилаються до MQTT брокера, а після цього на сервер через API, забезпечуючи їхню централізовану обробку та зберігання;
-	Обробка даних: Надіслані дані про вагу користувачів обробляються сервером, що дозволяє виконувати різні операції, включаючи аналіз, надання рекомендацій користувачам та перерахунок цілей користувача відносно до нової ваги.

Використані інструменти та технології:

-	Visual Studio: Використовувалося середовище розробки Visual Studio, яке надає потужні інструменти для розробки, налагодження та тестування ASP.NET додатків;

-	MSSQL Server: Це надійна та масштабована система управління базами даних, яка забезпечує високу продуктивність та безпеку даних;

-	Entity Framework Core: Для роботи з базою даних використовується ORM (Object-Relational Mapping) Entity Framework Core, який забезпечує зручний і ефективний доступ до даних, автоматизуючи процеси збереження, отримання та оновлення даних;

-	Swagger: Використовується для генерації та перегляду API;

- Git: Для керування версіями коду використовувалася система контролю версій Git.



3 Висновок:

Програмна система успішно розгорнута та протестована в локальному середовищі. Хоча через відсутність доступу до зовнішнього сервера система не була розгорнута на віддаленому сервері, всі компоненти працюють коректно на локальній машині. Це дозволяє продемонструвати всі аспекти роботи системи і її функціональність. 
Інтеграція з ІоТ системою вимірювання ваги забезпечує додаткову функціональність та автоматизує процес збору і обробки даних. В подальшому, система може бути легко розгорнута на віддаленому сервері за наявності відповідного доступу та інфраструктури.

Посилання на відео: https://www.youtube.com/watch?v=QwK-_m7-q-c

