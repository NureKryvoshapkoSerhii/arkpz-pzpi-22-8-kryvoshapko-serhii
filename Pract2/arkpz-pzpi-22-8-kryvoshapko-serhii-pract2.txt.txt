МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмної інженерії»


ЗВІТ
з практичного заняття № 2
з дисципліни «Аналіз та рефакторинг коду»



Виконав:
ст. гр. ПЗПІ-22-8
Кривошапко Сергій
	Перевірив:
ст. викладач каф. ПІ 
Сокорчук І.П






Харків 2024
1.1 Тема
      Методи рефакторингу коду програмного забезпечення.
1.2 Мета роботи
     Дослідити рекомендації щодо рефакторингу коду за книгою Мартін Р. Чистий код: створення і рефакторинг за допомогою AGILE, підготувати презентацію з опрацьованого матеріалу.
1.3 Хід роботи
     Втуп:
Що таке рефакторинг? Рефакторинг — це процес покращення внутрішньої структури коду без зміни його зовнішньої поведінки. Мета рефакторингу — підвищити якість, читабельність, структурованість і легкість підтримки коду. Зазвичай, під час рефакторингу прибирають дублікати коду, спрощують складні логічні конструкції та покращують загальний дизайн програми.
Обрані методи рефакторингу: 
1. Replace Method with Method Object (Заміна методу об'єктом методу) 
2. Introduce Parameter Object (Введення об'єкта параметрів) 
3. Replace Constructor with Factory Method (Заміна конструктора фабричним методом)




Рекомендації з рефакторингу обраних методів:
Метод 1: Replace Method with Method Object
Проблема: Коли метод стає надто складним, важко читається і має багато внутрішніх залежностей, виникають проблеми з його підтримкою. Це робить метод нечитабельним і складним для тестування.
Рішення: Замість довгого методу створимо новий клас (об'єкт методу), який виконує цю операцію, і розіб'ємо логіку на менші частини.
Переваги: Рефакторинг розбиває логіку на окремі частини, що покращує читабельність, а також робить клас більш модульним, сприяючи легшому тестуванню і розширенню функціоналу.
Приклад:
 
Рисунок 1 – Код до рефакторингу за методом Replace Method with Method Object
 
Рисунок 2 – Код після рефакторингу за методом Replace Method with Method Object

Метод 2: Introduce Parameter Object
Проблема: Коли метод має багато параметрів, це ускладнює читабельність і робить код важким для підтримки. Велика кількість параметрів може бути згрупована в об'єкт, що покращить структуру.
Рішення: Створимо об'єкт, який міститиме всі параметри, і передамо його замість окремих значень.
Переваги: Цей метод дозволяє передавати всю необхідну інформацію через один об’єкт, що покращує читабельність коду та полегшує майбутні зміни параметрів.
Приклад:
 
Рисунок 3 – Код до рефакторингу за методом Introduce Parameter Object
 
Рисунок 4 – Код після рефакторингу за методом Introduce Parameter Object

Метод 3: Replace Constructor with Factory Method
Проблема: Використання конструкторів може обмежувати гнучкість створення об'єктів, особливо якщо є складна логіка ініціалізації. У таких випадках краще використовувати фабричні методи.
Рішення: Замість конструктора використовуємо фабричний метод, який визначає, який об'єкт створювати, спрощуючи логіку ініціалізації.
Переваги: Фабричний метод дозволяє використовувати додаткову логіку при створенні об'єкта і забезпечує більшу гнучкість, порівняно з використанням конструкторів.
Приклад:

 
Рисунок 5 – Код до рефакторингу за методом Replace Constructor with Factory Method
 
Рисунок 6 – Код після рефакторингу за методом Replace Constructor with Factory Method



Висновок:
Переваги використання рефакторингу коду: 
1.	Читабельність: Рефакторинг допомагає зробити код зрозумілішим і логічно структурованим. Легко читається, швидко аналізується і спрощує роботу з ним. 
2.	Простота тестування: Чітка структура коду та розбиття складних методів на менші блоки полегшують написання тестів, що знижує ймовірність помилок. 
3.	Модульність і розширюваність: Код, розбитий на окремі методи та класи, стає більш модульним. Це дозволяє додавати новий функціонал або змінювати існуючий без значного втручання в основний код. 
4.	Адаптація до змін: У процесі розробки проєкту часто змінюються вимоги та з’являються нові функціональні запити. Рефакторинг дозволяє адаптувати код для нових потреб без суттєвого перероблення основної архітектури. 
5.	Мінімізація ризиків: Постійний рефакторинг дозволяє виявляти проблеми ще до того, як вони стануть критичними, знижуючи ризики у масштабних проєктах. 
6.	Полегшення командної роботи: Коли код зрозумілий і структурований, нові члени команди швидше адаптуються. Інші розробники можуть легше вносити зміни, не боячись пошкодити існуючу логіку
Поислання на відео: https://youtu.be/Tst6PURx9TU



1.4 Список використаних джерел:
1. Martin Fowler. "Refactoring: Improving the Design of Existing Code." Addison-Wesley, 2018. 
2. Robert C. Martin. "Clean Code: A Handbook of Agile Software Craftsmanship." Prentice Hall, 2008. 
3. Official Dart Documentation. "Effective Dart: Style." Dart.dev. https://dart.dev./effective-dart/documentation 
4. Refactoring Guru. "Refactoring Techniques: Replace Method with Method Object." refactoring.guru.



 
ДОДАТОК А
 
Рисунок А.1 – Титульний слайд презентації

 
Рисунок А.2 – Вступ в рефакторинг коду та обрані методи
 
Рисунок А.3 – Опис методу Replace Method with Method Object

 
Рисунок А.4 – Приклад використання методу Replace Method with Method Object

 
Рисунок А.5 – Опис методу Introduce Parameter Object
 
Рисунок А.6 – Приклад використання методу Introduce Parameter Object
 
Рисунок А.7 – Опис методу Replace Constructor with Factory Method

 
Рисунок А.8 – Приклад використання методу Replace Constructor with Factory Method
 
Рисунок А.9 – Виснопки чому варто використовувати методи рефакторингу

 
Рисунок А.10 – Список використаних джерел 
 
Рисунок А.11 – Слайд дякую за увагу
